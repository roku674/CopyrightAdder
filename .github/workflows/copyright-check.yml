# Copyright Header Check
# This workflow ensures all source files have proper copyright headers

name: Monthly Copyright Update

on:
  schedule:
    # Run at 2:00 AM UTC on the 1st of every month
    - cron: '0 2 1 * *'
  workflow_dispatch:  # Allow manual trigger for testing

jobs:
  copyright-update:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      actions: write
    
    steps:
      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for proper git attribution
          ref: master
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git Identity
        run: |
          # Configure git with a safe default identity for the workflow
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "github-actions[bot]"
          echo "Git identity configured for workflow operations"
      
      
      - name: Setup Copyright Adder
        run: |
          # Check if CopyrightAdder exists as submodule, otherwise download
          if [ -d "CopyrightAdder" ]; then
            echo "Using existing CopyrightAdder submodule"
            chmod +x CopyrightAdder/add_copyright_headers.sh
          elif [ -d "Copyright/CopyrightAdder" ]; then
            echo "Using existing Copyright/CopyrightAdder submodule"
            chmod +x Copyright/CopyrightAdder/add_copyright_headers.sh
          else
            echo "Downloading CopyrightAdder"
            mkdir -p CopyrightAdder
            curl -sSL https://raw.githubusercontent.com/roku674/CopyrightAdder/master/add_copyright_headers.sh -o CopyrightAdder/add_copyright_headers.sh
            curl -sSL https://raw.githubusercontent.com/roku674/CopyrightAdder/master/sources.txt -o CopyrightAdder/sources.txt
            chmod +x CopyrightAdder/add_copyright_headers.sh
          fi
      
      - name: Find all source files
        id: find-files
        run: |
          # Find all source files that need copyright headers
          find . -type f \( \
            -name "*.java" -o \
            -name "*.js" -o \
            -name "*.ts" -o \
            -name "*.jsx" -o \
            -name "*.tsx" -o \
            -name "*.cpp" -o \
            -name "*.cc" -o \
            -name "*.c" -o \
            -name "*.h" -o \
            -name "*.cs" -o \
            -name "*.py" -o \
            -name "*.go" -o \
            -name "*.rs" -o \
            -name "*.rb" -o \
            -name "*.php" -o \
            -name "*.sh" -o \
            -name "*.xml" -o \
            -name "*.html" -o \
            -name "*.sql" \
          \) ! -path "*/node_modules/*" \
             ! -path "*/vendor/*" \
             ! -path "*/build/*" \
             ! -path "*/dist/*" \
             ! -path "*/.git/*" \
             ! -name "*.min.js" \
             ! -name "*.min.css" > /tmp/files_to_process.txt

          echo "Found $(wc -l < /tmp/files_to_process.txt) files to check"
          echo "files_count=$(wc -l < /tmp/files_to_process.txt)" >> $GITHUB_OUTPUT

      - name: Run Copyright Adder on all files
        if: steps.find-files.outputs.files_count != '0'
        run: |
          echo "Adding copyright headers to all source files..."

          # Ensure we have full history
          git fetch --unshallow 2>/dev/null || true

          # Determine script path based on submodule structure
          if [ -d "CopyrightAdder" ]; then
            SCRIPT_PATH="./CopyrightAdder/add_copyright_headers.sh"
          elif [ -d "Copyright/CopyrightAdder" ]; then
            SCRIPT_PATH="./Copyright/CopyrightAdder/add_copyright_headers.sh"
          else
            echo "Error: Could not find CopyrightAdder script"
            exit 1
          fi

          # Process all files
          FILES_PROCESSED=0
          FILES_UPDATED=0

          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "Processing: $file"

              # Create a backup to check if file was actually modified
              cp "$file" "${file}.bak"

              # Run the copyright script
              if SOURCE_BRANCH="master" $SCRIPT_PATH "$file"; then
                FILES_PROCESSED=$((FILES_PROCESSED + 1))

                # Check if file was actually modified
                if ! cmp -s "$file" "${file}.bak"; then
                  FILES_UPDATED=$((FILES_UPDATED + 1))
                  echo "  ‚úì Copyright header added/updated"
                else
                  echo "  - Already has correct copyright header"
                fi
              else
                echo "  ‚úó Error processing file"
              fi

              # Clean up backup
              rm -f "${file}.bak"
            fi
          done < /tmp/files_to_process.txt

          echo ""
          echo "Summary:"
          echo "  Files processed: $FILES_PROCESSED"
          echo "  Files updated: $FILES_UPDATED"

          echo "files_updated=$FILES_UPDATED" >> $GITHUB_ENV
      
      - name: Check for changes
        id: check-changes
        run: |
          if [[ -n $(git status --porcelain) ]]; then
            echo "changes=true" >> $GITHUB_OUTPUT
            echo "Files missing copyright headers were found and updated."

            # Count and list changed files for the PR description
            echo "changed_count=$(git status --porcelain | wc -l)" >> $GITHUB_OUTPUT

            # Store changed files list for PR description (limit to prevent too long output)
            echo "changed_files<<EOF" >> $GITHUB_OUTPUT
            git status --porcelain | grep -E "^\s*M" | cut -c 4- | head -50
            if [ $(git status --porcelain | grep -E "^\s*M" | wc -l) -gt 50 ]; then
              echo "... and $(($(git status --porcelain | grep -E "^\s*M" | wc -l) - 50)) more files"
            fi
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
            echo "All files have proper copyright headers."
          fi
      
      - name: Create new branch for copyright headers
        if: steps.check-changes.outputs.changes == 'true'
        id: create-branch
        run: |
          # Generate branch name with current date
          MONTH=$(date +%B)
          YEAR=$(date +%Y)
          BRANCH_NAME="copyright-headers/monthly-update-$(date +%Y-%m)"
          echo "branch_name=${BRANCH_NAME}" >> $GITHUB_OUTPUT
          echo "month=${MONTH}" >> $GITHUB_OUTPUT
          echo "year=${YEAR}" >> $GITHUB_OUTPUT

          # Create and checkout new branch
          git checkout -b "${BRANCH_NAME}"

          # Add all changes
          git add -A

          # Create commit
          git commit -m "Add copyright headers - ${MONTH} ${YEAR} monthly update"

          # Push the new branch
          git push origin "${BRANCH_NAME}"
      
      - name: Close existing copyright PRs
        if: steps.check-changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            // Find and close any existing monthly copyright PRs
            const { data: prs } = await github.rest.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              base: 'master'
            });

            const copyrightPRs = prs.filter(pr =>
              pr.head.ref.startsWith('copyright-headers/monthly-update-') &&
              pr.user.login === 'github-actions[bot]'
            );

            for (const pr of copyrightPRs) {
              console.log(`Closing old monthly copyright PR #${pr.number}`);

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: 'üîÑ **Superseded by new monthly copyright update**\n\nThis PR is being closed because a new monthly copyright update has been generated.'
              });

              await github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                state: 'closed'
              });
            }

      - name: Create Pull Request
        if: steps.check-changes.outputs.changes == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const branchName = '${{ steps.create-branch.outputs.branch_name }}';
            const month = '${{ steps.create-branch.outputs.month }}';
            const year = '${{ steps.create-branch.outputs.year }}';
            const changedFiles = `${{ steps.check-changes.outputs.changed_files }}`;
            const changedCount = '${{ steps.check-changes.outputs.changed_count }}';

            const prTitle = `Monthly Copyright Headers Update - ${month} ${year}`;

            const prBody = `## üìÖ Monthly Copyright Headers Update

            This automated pull request adds missing copyright headers to source files as part of the scheduled monthly maintenance.

            ### üìä Statistics
            - **Files Updated**: ${changedCount}
            - **Date**: ${month} ${year}
            - **Target Branch**: master

            ### üìù Changed Files
            <details>
            <summary>Click to expand file list</summary>

            \`\`\`
            ${changedFiles}
            \`\`\`
            </details>

            ### ‚ÑπÔ∏è About This PR
            - This PR is automatically generated on the 1st of each month
            - It ensures all source files have proper copyright headers
            - Review the changes to ensure they look correct
            - Once merged, all files will have up-to-date copyright information

            ### ‚úÖ Next Steps
            1. Review the changes
            2. Ensure tests pass
            3. Merge when ready

            ---
            *ü§ñ Generated automatically by the Monthly Copyright Update workflow*`;
            
            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: prTitle,
              body: prBody,
              head: branchName,
              base: 'master',
              labels: ['copyright', 'automated', 'monthly-update', 'maintenance']
            });

            console.log(`Created PR #${pr.data.number}: ${pr.data.html_url}`);

            // Output PR URL for notification purposes
            core.setOutput('pr_url', pr.data.html_url);
            core.setOutput('pr_number', pr.data.number);
      
      - name: Clean up
        if: always()
        run: |
          rm -rf CopyrightAdder
          rm -f /tmp/files_to_process.txt